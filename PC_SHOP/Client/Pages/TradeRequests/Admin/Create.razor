@page "/admintraderequests/create/"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3>Create Trade Requests</h3>
<hr />
<br />

<EditForm Model="@traderequest" OnValidSubmit="CreateTradeRequest">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Requested Item:</label>
        <div>
            <InputSelect @bind-Value="traderequest.ListItemID" class="form-control">
                <option value="">--Select Item --</option>
                @if (ListItems != null)
                {
                    foreach (var listItem in ListItems)
                    {

                        @if (Items != null)
                        {
                            foreach (var item in Items)
                            {
                                if (listItem.ItemID == item.Id)
                                {
                                    <option value="@listItem.Id">Name: @item.Name   Condition: @item.Condition.Name   Brand: @item.Brand.Name   Category: @item.Category.Name</option>
                                }
                            }
                        }
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => traderequest.ListItemID)" />
        </div>
    </div>
    <div class="form-group">
        <label>Item for trade:</label>
        <div>
            <InputSelect @bind-Value="traderequest.ItemID" class="form-control">
                <option value="">--Select Item --</option>
                @if (Items != null)
                {
                    foreach (var item in Items)
                    {
                        <option value="@item.Id">Name: @item.Name   Condition: @item.Condition.Name   Brand: @item.Brand.Name   Category: @item.Category.Name</option>

                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => traderequest.ItemID)" />
        </div>
    </div>

    @if (exist)
    {
        <p style="color:red">Item already offered in another request! Offer another item.</p>
        exist = false;
    }


    <button type="submit" class="btn btn-success btn-block">
        Create Trade Request
    </button>

    <BackToList Target="admintraderequests" />

</EditForm>

@code {
    TradeRequest traderequest = new TradeRequest();

    private IList<Item> Items;
    private IList<ListItem> ListItems;
    private IList<TradeRequest> tradeRequests;

    public bool exist { get; set; } = false;

    protected async override Task OnInitializedAsync()
    {
        Items = await _client.GetFromJsonAsync<List<Item>>($"{Endpoints.ItemsEndpoint}");
        ListItems = await _client.GetFromJsonAsync<List<ListItem>>($"{Endpoints.ListItemsEndpoint}");
        tradeRequests = await _client.GetFromJsonAsync<List<TradeRequest>>($"{Endpoints.TradeRequestsEndpoint}");
    }

    private async Task CreateTradeRequest()
    {
        foreach (var request in tradeRequests)
        {
            if (request.ItemID == traderequest.ItemID)
            {
                exist = true;
                break;
            }
        }
        if (!exist)
        {
            await _client.PostAsJsonAsync(Endpoints.TradeRequestsEndpoint, traderequest);
            _navManager.NavigateTo("/admintraderequests/");
        }

    }
}
