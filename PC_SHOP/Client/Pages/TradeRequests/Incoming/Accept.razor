@page "/intraderequests/accept/{itemid:int}/{reqid:int}/{itemid2:int}"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3>Accept Request</h3>

<EditForm Model="@item" OnValidSubmit="EditItem">
    <div class="form-group">
        <label>give to:</label>
        <div>
            <InputText @bind-Value="@item.CreatedBy" class="form-control" />
        </div>
    </div>
    @if (!Lock)
    {
        <button type="submit" class="btn btn-success btn-block">
            Confirm item to be sent
        </button>
    }
</EditForm>

<EditForm Model="@item2" OnValidSubmit="Clean">
    <div class="form-group">
        <label>Me:</label>
        <div>
            <InputText @bind-Value="@item2.CreatedBy" class="form-control" />
        </div>
    </div>
    @if (Lock)
        {
            <button type="submit" class="btn btn-success btn-block">
                Confirm item to be recieved
            </button>
        }

</EditForm>

@if (!Lock)
{
    <BackToList Target="intraderequests" />
}


@code {
    [Parameter] public int itemid { get; set; }
    [Parameter] public int reqid { get; set; }
    [Parameter] public int itemid2 { get; set; }

    public bool Lock { get; set; } = false;

    public string save { get; set; }

    Item item = new Item();
    Item item2 = new Item();
    TradeRequest traderequest = new TradeRequest();

    private IList<TradeRequest> tr;
    private IList<PurchaseRequest> pr;
    private IList<ListItem> li;
    private IList<Item> i;

    protected async override Task OnParametersSetAsync()
    {
        item = await _client.GetFromJsonAsync<Item>($"{Endpoints.ItemsEndpoint}/{itemid}");
        item2 = await _client.GetFromJsonAsync<Item>($"{Endpoints.ItemsEndpoint}/{itemid2}");
        traderequest = await _client.GetFromJsonAsync<TradeRequest>($"{Endpoints.TradeRequestsEndpoint}/{reqid}");

        save = item.CreatedBy;

        item.CreatedBy = traderequest.CreatedBy;

        item2.CreatedBy = save;

    }

    protected async override Task OnInitializedAsync()
    {
        tr = await _client.GetFromJsonAsync<List<TradeRequest>>($"{Endpoints.TradeRequestsEndpoint}");
        pr = await _client.GetFromJsonAsync<List<PurchaseRequest>>($"{Endpoints.PurchaseRequestsEndpoint}");
        li = await _client.GetFromJsonAsync<List<ListItem>>($"{Endpoints.ListItemsEndpoint}");
        i = await _client.GetFromJsonAsync<List<Item>>($"{Endpoints.ItemsEndpoint}");
    }

    async Task Clean()
    {
        foreach (var tr in tr)
        {
            if (tr.ListItemID == traderequest.ListItemID)
            {
                await _client.DeleteAsync($"{Endpoints.TradeRequestsEndpoint}/{tr.Id}");
            }
        }
        foreach (var pr in pr)
        {
            if (pr.ListItemID == traderequest.ListItemID)
            {
                await _client.DeleteAsync($"{Endpoints.PurchaseRequestsEndpoint}/{pr.Id}");
            }
        }
        foreach (var li in li)
        {
            if (li.Id == traderequest.ListItemID)
            {
                await _client.DeleteAsync($"{Endpoints.ListItemsEndpoint}/{li.Id}");
            }
        }

        EditItem2();
    }

    async Task EditItem()
    {
        await _client.PutAsJsonAsync($"{Endpoints.ItemsEndpoint}/{itemid}", item);
        Lock = true;
    }

    async Task EditItem2()
    {
        await _client.PutAsJsonAsync($"{Endpoints.ItemsEndpoint}/{itemid2}", item2);
        _navManager.NavigateTo("/intraderequests/");
    }


}