@page "/inpurchaserequests/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpInterceptorService _interceptor


<h3>Incoming Purchase Requests</h3>


@if (PurchaseRequests == null)
{

    <div class="alert alert-info">Loading Requests...</div>

}
else
{
    <table class="table table-responsive" id="inpurchaserequestsTable">
        <thead>
            <tr>
                <th>Requested By</th>
                <th>Item Requested</th>
                <th>Item Price($)</th>
                <th>Offered Price($)</th>
                <th>Payment</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var request in PurchaseRequests)
            {
                if (request.ListItem.CreatedBy == @_currentUserName)
                {
                    <tr>
                        <td>@request.CreatedBy</td>
                        @if (ListItems != null)
                        {
                            foreach (var listItem in ListItems)
                            {
                                if (@request.ListItemID == listItem.Id)
                                {
                                    @if (Items != null)
                                    {
                                        foreach (var item in Items)
                                        {
                                            if (@request.ListItem.ItemID == item.Id)
                                            {
                                                <td>@item.Name</td>

                                            }
                                        }
                                    }
                                }
                            }
                        }
                        @if (ListItems != null)
                        {
                            foreach (var listItem in ListItems)
                            {
                                if (@request.ListItemID == listItem.Id)
                                {
                                    <td>@listItem.Price</td>
                                }
                            }
                        }
                        <td>@request.Price</td>
                        <td>@request.Payment.Name</td>
                        <td>
                            <a href="/inpurchaserequests/view/@request.Id" class="btn btn-primary">
                                <span class="oi oi-book"></span>
                            </a>
                            @foreach (var item in Items)
                            {
                                if (@request.ListItem.ItemID == item.Id)
                                {
                                    @foreach (var listItem in ListItems)
                                    {
                                        if (@request.ListItemID == @listItem.Id)
                                        {
                                            <a href="/inpurchaserequests/accept/@item.Id/@request.Id/@listItem.Id" class="btn btn-success">
                                                <span class="oi oi-circle-check"></span>
                                            </a>
                                        }
                                    }

                                }
                            }
                            <button class="btn btn-danger" @onclick="@(()=>Deny(@request.Id))">
                                <span class="oi oi-circle-x"></span>
                            </button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

}

<EditForm Model="@transaction" OnValidSubmit="CreateTransaction">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div hidden>
        <div class="form-group">
            <label>Brand Name:</label>
            <div>
                <InputText @bind-Value="@transaction.ListedItemOwner" class="form-control" />
                <ValidationMessage For="@(() => transaction.ListedItemOwner)" />
            </div>
        </div>
        <div class="form-group">
            <label>Brand Name:</label>
            <div>
                <InputText @bind-Value="@transaction.ListedItemName" class="form-control" />
                <ValidationMessage For="@(() => transaction.ListedItemName)" />
            </div>
        </div>
        <div class="form-group">
            <label>Brand Name:</label>
            <div>
                <InputNumber @bind-Value="@transaction.ListedItemPrice" class="form-control" />
                <ValidationMessage For="@(() => transaction.ListedItemPrice)" />
            </div>
        </div>
        <div class="form-group">
            <label>Brand Name:</label>
            <div>
                <InputText @bind-Value="@transaction.BuyerName" class="form-control" />
                <ValidationMessage For="@(() => transaction.BuyerName)" />
            </div>
        </div>
        <div class="form-group">
            <label>Brand Name:</label>
            <div>
                <InputText @bind-Value="@transaction.TransactionType" class="form-control" />
                <ValidationMessage For="@(() => transaction.TransactionType)" />
            </div>
        </div>
        <div class="form-group">
            <label>Brand Name:</label>
            <div>
                <InputNumber @bind-Value="@transaction.OfferPrice" class="form-control" />
                <ValidationMessage For="@(() => transaction.OfferPrice)" />
            </div>
        </div>
        <div class="form-group">
            <label>Brand Name:</label>
            <div>
                <InputText @bind-Value="@transaction.OfferItem" class="form-control" />
                <ValidationMessage For="@(() => transaction.OfferItem)" />
            </div>
        </div>
        <div class="form-group">
            <label>Brand Name:</label>
            <div>
                <InputText @bind-Value="@transaction.Status" class="form-control" />
                <ValidationMessage For="@(() => transaction.Status)" />
            </div>
        </div>
    </div>
</EditForm>

@code {

    private List<PurchaseRequest> PurchaseRequests;
    private IList<ListItem> ListItems;
    private IList<Item> Items;
    private List<AppUser> AppUsers;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
    private string _currentUserId;
    private string _currentUserName;
    private string _currentUserRole;


    Transaction transaction = new Transaction();


    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        PurchaseRequests = await _client.GetFromJsonAsync<List<PurchaseRequest>>($"{Endpoints.PurchaseRequestsEndpoint}");
        ListItems = await _client.GetFromJsonAsync<List<ListItem>>($"{Endpoints.ListItemsEndpoint}");
        Items = await _client.GetFromJsonAsync<List<Item>>($"{Endpoints.ItemsEndpoint}");

        AppUsers = await _client.GetFromJsonAsync<List<AppUser>>($"{Endpoints.AccountsEndpoint}");
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _claims = user.Claims;
            //_currentUserName = user.Identity.Name;
            if (_claims.Count() > 0)
            {
                foreach (var claim in _claims)
                {
                    if (claim.Type == "sub")
                    {
                        _currentUserId = claim.Value;
                        continue;

                    }
                    if (claim.Type == "name")
                    {
                        _currentUserName = claim.Value;
                        continue;
                    }
                }
            }
        }

        if (_currentUserId != String.Empty)
        {
            _currentUserRole = await _client.GetStringAsync($"{Endpoints.AccountsEndpoint}/{_currentUserId}");
        }

    }

    async Task Deny(int purchaserequestId)
    {
        foreach (var pr in PurchaseRequests)
        {
            if (pr.Id == purchaserequestId)
            {
                transaction.ListedItemOwner = pr.ListItem.CreatedBy;
                transaction.ListedItemName = pr.ListItem.Item.Name;
                transaction.ListedItemPrice = pr.ListItem.Price;
                transaction.BuyerName = pr.CreatedBy;
                transaction.TransactionType = "purchase";
                transaction.OfferPrice = pr.Price;
                transaction.Status = "Denied";
            }

        }

        CreateTransaction();

        var purchaserequest = PurchaseRequests.First(q => q.Id == purchaserequestId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete request?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.PurchaseRequestsEndpoint}/{purchaserequestId}");
            await OnInitializedAsync();

        }

    }

    private async Task CreateTransaction()
    {
        await _client.PostAsJsonAsync(Endpoints.TransactionsEndpoint, transaction);
    }


    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#inpurchaserequestsTable");

    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#inpurchaserequestsTable");
        _interceptor.DisposeEvent();
    }

}
