@page "/items/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@implements IDisposable
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpInterceptorService _interceptor


<h3>Item Inventory</h3>

<br />
<a href="/items/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Item
</a>
<br />
<br />

@if (Items == null)
{

    <div class="alert alert-info">Loading Items...</div>

}
else
{
    <table class="table table-responsive" id="itemsTable">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Condition</th>
                <th>Brand</th>
                <th>Category</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Items)
            {
                if (item.CreatedBy == @_currentUserName)
                {
                    <tr>
                        <td>@item.Name</td>
                        <td>@item.Description</td>
                        <td>@item.Condition.Name</td>
                        <td>@item.Brand.Name</td>
                        <td>@item.Category.Name</td>
                        <td>
                            <a href="/items/view/@item.Id" class="btn btn-primary">
                                <span class="oi oi-book"></span>
                            </a>
                            <a href="/items/sell/@item.Id" class="btn btn-info">
                                <span class="oi oi-dollar"></span>
                            </a>
                            <a href="/items/edit/@item.Id" class="btn btn-warning">
                                <span class="oi oi-pencil"></span>
                            </a>
                            <button class="btn btn-danger" @onclick="@(()=>Delete (item.Id))">
                                <span class="oi oi-delete"></span>
                            </button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

}

@if (cascaded)
{
    <p style="color:red">Unable to delete item. Please clear all requests related to item first.</p>
    cascaded = false;
}

@code {

    private List<Item> Items;
    private List<AppUser> AppUsers;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
    private string _currentUserId;
    private string _currentUserName;
    private string _currentUserRole;

    public bool cascaded { get; set; } = false;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Items = await _client.GetFromJsonAsync<List<Item>>($"{Endpoints.ItemsEndpoint}");

        AppUsers = await _client.GetFromJsonAsync<List<AppUser>>($"{Endpoints.AccountsEndpoint}");
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _claims = user.Claims;
            //_currentUserName = user.Identity.Name;
            if (_claims.Count() > 0)
            {
                foreach (var claim in _claims)
                {
                    if (claim.Type == "sub")
                    {
                        _currentUserId = claim.Value;
                        continue;

                    }
                    if (claim.Type == "name")
                    {
                        _currentUserName = claim.Value;
                        continue;
                    }
                }
            }
        }

        if (_currentUserId != String.Empty)
        {
            _currentUserRole = await _client.GetStringAsync($"{Endpoints.AccountsEndpoint}/{_currentUserId}");
        }
    }

    async Task Delete(int itemId)
    {
        var item = Items.First(q => q.Id == itemId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {item.Name}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.ItemsEndpoint}/{itemId}");
            await OnInitializedAsync();

        }
        else
        {
            return;
        }

        foreach (var i in Items)
        {
            if (i.Id == itemId)
            {
                cascaded = true;
            }
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#itemsTable");

    }

    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#itemsTable");
        _interceptor.DisposeEvent();
    }

}
