@page "/inpurchaserequests/accept/{itemid:int}/{reqid:int}/{listid:int}"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3>Accept Request</h3>

<EditForm Model="@item" OnValidSubmit="Clean">
    <fieldset disabled>
        <div class="form-group">
            <label>Sell to:</label>
            <div>
                <InputText @bind-Value="@item.CreatedBy" class="form-control" />
            </div>
        </div>
        <div class="form-group">
            <label>Item:</label>
            <div>
                <InputText @bind-Value="@item.Name" class="form-control" />
            </div>
        </div>
    </fieldset>
    <fieldset disabled>
        <div class="form-group">
            <label>For($):</label>
            <div>
                <InputNumber @bind-Value="@purchaserequest.Price" class="form-control" />
            </div>
        </div>
    </fieldset>
</EditForm>

<EditForm Model="@transaction" OnValidSubmit="CreateTransaction">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div hidden>
        <div class="form-group">
            <label>Brand Name:</label>
            <div>
                <InputText @bind-Value="@transaction.ListedItemOwner" class="form-control" />
                <ValidationMessage For="@(() => transaction.ListedItemOwner)" />
            </div>
        </div>
        <div class="form-group">
            <label>Brand Name:</label>
            <div>
                <InputText @bind-Value="@transaction.ListedItemName" class="form-control" />
                <ValidationMessage For="@(() => transaction.ListedItemName)" />
            </div>
        </div>
        <div class="form-group">
            <label>Brand Name:</label>
            <div>
                <InputNumber @bind-Value="@transaction.ListedItemPrice" class="form-control" />
                <ValidationMessage For="@(() => transaction.ListedItemPrice)" />
            </div>
        </div>
        <div class="form-group">
            <label>Brand Name:</label>
            <div>
                <InputText @bind-Value="@transaction.BuyerName" class="form-control" />
                <ValidationMessage For="@(() => transaction.BuyerName)" />
            </div>
        </div>
        <div class="form-group">
            <label>Brand Name:</label>
            <div>
                <InputText @bind-Value="@transaction.TransactionType" class="form-control" />
                <ValidationMessage For="@(() => transaction.TransactionType)" />
            </div>
        </div>
        <div class="form-group">
            <label>Brand Name:</label>
            <div>
                <InputNumber @bind-Value="@transaction.OfferPrice" class="form-control" />
                <ValidationMessage For="@(() => transaction.OfferPrice)" />
            </div>
        </div>
        <div class="form-group">
            <label>Brand Name:</label>
            <div>
                <InputText @bind-Value="@transaction.OfferItem" class="form-control" />
                <ValidationMessage For="@(() => transaction.OfferItem)" />
            </div>
        </div>
        <div class="form-group">
            <label>Brand Name:</label>
            <div>
                <InputText @bind-Value="@transaction.Status" class="form-control" />
                <ValidationMessage For="@(() => transaction.Status)" />
            </div>
        </div>
    </div>
</EditForm>

<button type="submit" class="btn btn-success btn-block" @onclick="ALL">
    Confirm Purchase
</button>
<BackToList Target="inpurchaserequests" />


@code {
    [Parameter] public int itemid { get; set; }
    [Parameter] public int reqid { get; set; }
    [Parameter] public int listid { get; set; }

    Item item = new Item();
    PurchaseRequest purchaserequest = new PurchaseRequest();
    Transaction transaction = new Transaction();
    ListItem listItem = new ListItem();

    public string test { get; set; }

    private IList<TradeRequest> tr;
    private IList<PurchaseRequest> pr;
    private IList<ListItem> li;

    protected async override Task OnParametersSetAsync()
    {
        item = await _client.GetFromJsonAsync<Item>($"{Endpoints.ItemsEndpoint}/{itemid}");
        purchaserequest = await _client.GetFromJsonAsync<PurchaseRequest>($"{Endpoints.PurchaseRequestsEndpoint}/{reqid}");
        listItem = await _client.GetFromJsonAsync<ListItem>($"{Endpoints.ListItemsEndpoint}/{listid}");

        item.CreatedBy = purchaserequest.CreatedBy;

        transaction.ListedItemOwner = listItem.CreatedBy;
        transaction.ListedItemName = item.Name;
        transaction.ListedItemPrice = listItem.Price;
        transaction.BuyerName = purchaserequest.CreatedBy;
        transaction.TransactionType = "purchase";
        transaction.OfferPrice = purchaserequest.Price;
        transaction.Status = "Accepted";

    }

    protected async override Task OnInitializedAsync()
    {
        tr = await _client.GetFromJsonAsync<List<TradeRequest>>($"{Endpoints.TradeRequestsEndpoint}");
        pr = await _client.GetFromJsonAsync<List<PurchaseRequest>>($"{Endpoints.PurchaseRequestsEndpoint}");
        li = await _client.GetFromJsonAsync<List<ListItem>>($"{Endpoints.ListItemsEndpoint}");
    }


    async Task Clean()
    {

        foreach (var tr in tr)
        {
            if (tr.ListItemID == purchaserequest.ListItemID)
            {

                await _client.DeleteAsync($"{Endpoints.TradeRequestsEndpoint}/{tr.Id}");
                DenyTR(tr);

            }
        }
        foreach (var pr in pr)
        {
            if (pr.ListItemID == purchaserequest.ListItemID)
            {


                if (pr.Id != reqid)
                {
                    DenyPR(pr);
                }

                await _client.DeleteAsync($"{Endpoints.PurchaseRequestsEndpoint}/{pr.Id}");

            }
        }
        foreach (var li in li)
        {
            if (li.Id == purchaserequest.ListItemID)
            {
                await _client.DeleteAsync($"{Endpoints.ListItemsEndpoint}/{li.Id}");
            }
        }

        EditItem();
    }

    async Task EditItem()
    {
        await _client.PutAsJsonAsync($"{Endpoints.ItemsEndpoint}/{itemid}", item);
        _navManager.NavigateTo("/inpurchaserequests/");
    }

    private async Task CreateTransaction()
    {
        await _client.PostAsJsonAsync(Endpoints.TransactionsEndpoint, transaction);
    }

    async Task ALL()
    {

        CreateTransaction();

        Clean();

    }


    async Task DenyTR(TradeRequest tr)
    {

        transaction.ListedItemOwner = tr.ListItem.CreatedBy;
        transaction.ListedItemName = tr.ListItem.Item.Name;
        transaction.ListedItemPrice = tr.ListItem.Price;
        transaction.BuyerName = tr.CreatedBy;
        transaction.TransactionType = "trade";
        transaction.OfferItem = tr.Item.Name;
        transaction.Status = "Denied";

        CreateTransaction();

    }

    async Task DenyPR(PurchaseRequest pr)
    {

        transaction.ListedItemOwner = pr.ListItem.CreatedBy;
        transaction.ListedItemName = pr.ListItem.Item.Name;
        transaction.ListedItemPrice = pr.ListItem.Price;
        transaction.BuyerName = pr.CreatedBy;
        transaction.TransactionType = "purchase";
        transaction.OfferPrice = pr.Price;
        transaction.Status = "Denied";

        CreateTransaction();

    }


}