@inject HttpClient _client
@attribute [Authorize]
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider

<EditForm Model="@purchaserequest" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <fieldset disabled="@Lock">
            <div class="form-group">

                <label>Requested Item:</label>
                <div>
                    <InputSelect @bind-Value="purchaserequest.ListItemID" class="form-control">
                        <option value="">--Select Item --</option>
                        @if (ListItems != null)
                        {
                            foreach (var listItem in ListItems)
                            {

                                @if (Items != null)
                                {
                                    foreach (var item in Items)
                                    {
                                        if (listItem.ItemID == item.Id)
                                        {
                                            if (@item.CreatedBy != @_currentUserName)
                                            {
                                                <option value="@listItem.Id">Name: @item.Name   Condition: @item.Condition.Name   Brand: @item.Brand.Name   Category: @item.Category.Name</option>
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => purchaserequest.ListItemID)" />
                </div>
            </div>
        </fieldset>
            <div class="form-group">
                <label>Offered Price:</label>
                <div>
                    <InputNumber @bind-Value="@purchaserequest.Price" class="form-control" />
                    <ValidationMessage For="@(() => purchaserequest.Price)" />
                </div>
            </div>
            <div class="form-group">
                <label>Payment Method:</label>
                <div>
                    <InputSelect @bind-Value="purchaserequest.PaymentID" class="form-control">
                        <option value="">--Payment Method--</option>
                        @if (Payments != null)
                        {
                            foreach (var payment in Payments)
                            {
                                <option value="@payment.Id">@payment.Name</option>
                            }
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => purchaserequest.PaymentID)" />
                </div>
            </div>
        </fieldset>

        @if (!Disabled)
        {
            <button type="submit" class="btn btn-success btn-block">
                @ButtonText
            </button>
        }
        <BackToList Target="outpurchaserequests" />

</EditForm>

@code {

    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public PurchaseRequest purchaserequest { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public bool Lock { get; set; } = false;

    private List<AppUser> AppUsers;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
    private string _currentUserId;
    private string _currentUserName;
    private string _currentUserRole;

    private IList<Item> Items;
    private IList<Payment> Payments;
    private IList<ListItem> ListItems;

    protected async override Task OnInitializedAsync()
    {
        Items = await _client.GetFromJsonAsync<List<Item>>($"{Endpoints.ItemsEndpoint}");
        Payments = await _client.GetFromJsonAsync<List<Payment>>($"{Endpoints.PaymentsEndpoint}");
        ListItems = await _client.GetFromJsonAsync<List<ListItem>>($"{Endpoints.ListItemsEndpoint}");

        AppUsers = await _client.GetFromJsonAsync<List<AppUser>>($"{Endpoints.AccountsEndpoint}");
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _claims = user.Claims;
            //_currentUserName = user.Identity.Name;
            if (_claims.Count() > 0)
            {
                foreach (var claim in _claims)
                {
                    if (claim.Type == "sub")
                    {
                        _currentUserId = claim.Value;
                        continue;

                    }
                    if (claim.Type == "name")
                    {
                        _currentUserName = claim.Value;
                        continue;
                    }
                }
            }
        }

        if (_currentUserId != String.Empty)
        {
            _currentUserRole = await _client.GetStringAsync($"{Endpoints.AccountsEndpoint}/{_currentUserId}");
        }
    }

}
