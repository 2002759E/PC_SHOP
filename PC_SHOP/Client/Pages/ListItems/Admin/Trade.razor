@page "/adminlistitems/trade/{id:int}"
@inject HttpClient _client
@inject NavigationManager _navManager
@attribute [Authorize]
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Create Trade Request</h3>
<hr />
<br />

<style>

    .center {
        text-align: center;
    }

</style>

<EditForm Model="@traderequest" OnValidSubmit="CreateTradeRequest">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled>
        <div class="form-group">
            <label>Requested Item:</label>
            <div>
                <InputSelect @bind-Value="traderequest.ListItemID" class="form-control">

                    @if (ListItems != null)
                    {
                        foreach (var listItem in ListItems)
                        {

                            @if (Items != null)
                            {
                                foreach (var item in Items)
                                {
                                    if (listItem.ItemID == item.Id)
                                    {
                                        if (listItem.Id == listitem.Id)
                                        {
                                            <option value="@listItem.Id">Name: @item.Name   Condition: @item.Condition.Name   Brand: @item.Brand.Name   Category: @item.Category.Name</option>
                                        }

                                    }
                                }
                            }
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => traderequest.ListItemID)" />
            </div>
        </div>
    </fieldset>
    <div class="form-group">
        <label>User:</label>
        <div>
            <InputSelect @bind-Value="@traderequest.CreatedBy" class="form-control">
                @if (AppUsers != null)
                {
                    @foreach (var user in AppUsers)
                    {
                        if (user.UserName != listitem.CreatedBy)
                        {
                            <option value="@user.UserName">@user.UserName</option>
                        }
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => traderequest.CreatedBy)" />
        </div>
    </div>
    <div class="form-group">
        <label>Item for trade:</label>
        <div>
            <InputSelect @bind-Value="traderequest.ItemID" class="form-control">
                <option value="">--Select Item --</option>
                @if (Items != null)
                {
                    foreach (var item in Items)
                    {
                        if (item.Id != listitem.ItemID)
                        {
                            if (item.CreatedBy == traderequest.CreatedBy)
                            {
                                <option value="@item.Id">Name: @item.Name   Condition: @item.Condition.Name   Brand: @item.Brand.Name   Category: @item.Category.Name</option>
                            }
                            
                        }

                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => traderequest.ItemID)" />
        </div>
    </div>

    @if (exist)
    {
        <p style="color:red">Item already offered in another request! Offer another item.</p>
        exist = false;
    }


    <button type="submit" class="btn btn-success btn-block">
        Create Request
    </button>

    <BackToList Target="adminlistitems" />
    <br />
    <div class="center">
        <a href="/adminlistitems/currenttrade/@id" class="btn btn-info">
            Current Trade Offers
        </a>
    </div>
</EditForm>

@code {

    private List<AppUser> AppUsers;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
    private string _currentUserId;
    private string _currentUserName;
    private string _currentUserRole;

    [Parameter] public int id { get; set; }

    public bool exist { get; set; } = false;

    TradeRequest traderequest = new TradeRequest();

    private IList<Item> Items;
    private IList<ListItem> ListItems;
    private IList<TradeRequest> tradeRequests;

    protected async override Task OnInitializedAsync()
    {
        Items = await _client.GetFromJsonAsync<List<Item>>($"{Endpoints.ItemsEndpoint}");
        ListItems = await _client.GetFromJsonAsync<List<ListItem>>($"{Endpoints.ListItemsEndpoint}");
        tradeRequests = await _client.GetFromJsonAsync<List<TradeRequest>>($"{Endpoints.TradeRequestsEndpoint}");

        AppUsers = await _client.GetFromJsonAsync<List<AppUser>>($"{Endpoints.AccountsEndpoint}");
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _claims = user.Claims;
            //_currentUserName = user.Identity.Name;
            if (_claims.Count() > 0)
            {
                foreach (var claim in _claims)
                {
                    if (claim.Type == "sub")
                    {
                        _currentUserId = claim.Value;
                        continue;

                    }
                    if (claim.Type == "name")
                    {
                        _currentUserName = claim.Value;
                        continue;
                    }
                }
            }
        }

        if (_currentUserId != String.Empty)
        {
            _currentUserRole = await _client.GetStringAsync($"{Endpoints.AccountsEndpoint}/{_currentUserId}");
        }

        traderequest.CreatedBy = "Admin";
    }

    private async Task CreateTradeRequest()
    {
        foreach (var request in tradeRequests)
        {
            if (request.ItemID == traderequest.ItemID)
            {
                exist = true;
                break;
            }
        }
        if (!exist)
        {
            await _client.PostAsJsonAsync(Endpoints.TradeRequestsEndpoint, traderequest);
            _navManager.NavigateTo("/adminlistitems/");
        }


    }

    ListItem listitem = new ListItem();

    protected async override Task OnParametersSetAsync()
    {
        listitem = await _client.GetFromJsonAsync<ListItem>($"{Endpoints.ListItemsEndpoint}/{id}");

        traderequest.ListItemID = listitem.Id;

    }
}
