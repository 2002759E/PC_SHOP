@inject HttpClient _client
@inject NavigationManager _navManager

<h3>FormComponent</h3>

<EditForm Model="@review" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="form-group">
            <label>User:</label>
            <div>
                <InputSelect @bind-Value="@review.Username" class="form-control">
                    <option value="">--Select User--</option>
                    @if (AppUsers != null)
                    {
                        @foreach (var user in AppUsers)
                        {
                            <option value="@user.UserName">@user.UserName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => review.Username)" />
            </div>
        </div>
        <div class="form-group">
            <label>Rating:</label>
            <div>
                <InputNumber @bind-Value="@review.Rating" class="form-control" />
                <ValidationMessage For="@(() => review.Rating)" />
            </div>
        </div>
    </fieldset>
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            Update Review
        </button>
    }
    <BackToList Target="reviews" />

</EditForm>


@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Review review { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<AppUser> AppUsers;

    protected async override Task OnInitializedAsync()
    {
        AppUsers = await _client.GetFromJsonAsync<List<AppUser>>($"{Endpoints.AccountsEndpoint}");

    }
}
