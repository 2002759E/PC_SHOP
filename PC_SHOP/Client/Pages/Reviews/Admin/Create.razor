@page "/reviews/create/"
@inject HttpClient _client
@inject NavigationManager _navManager



<h3 class="card-title">Add Review</h3>
<EditForm Model="@review" OnValidSubmit="CreateReview">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>User:</label>
        <div>
            <InputSelect @bind-Value="@review.Username" class="form-control">
                <option value="">--Select User--</option>
                @if (AppUsers != null)
                {
                    @foreach (var user in AppUsers)
                    {
                        if (user.UserName != "Admin")
                        {
                            <option value="@user.UserName">@user.UserName</option>
                        }
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => review.Username)" />
        </div>
    </div>
    <div class="form-group">
        <label>Rate the User 1 - 10</label>
        <div>
            <InputNumber @bind-Value="@review.Rating" class="form-control" />
            <ValidationMessage For="@(() => review.Rating)" />
        </div>
    </div>

    <button type="submit" class="btn btn-success btn-block">
        Add Review
    </button>
    <BackToList Target="reviews" />

</EditForm>






@code {
    Review review = new Review();

    private async Task CreateReview()
    {
        await _client.PostAsJsonAsync(Endpoints.ReviewsEndpoint, review);
        _navManager.NavigateTo("/reviews/");
    }

    private IList<AppUser> AppUsers;

    protected async override Task OnInitializedAsync()
    {
        AppUsers = await _client.GetFromJsonAsync<List<AppUser>>($"{Endpoints.AccountsEndpoint}");
        
    }
}
