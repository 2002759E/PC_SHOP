@page "/adminintraderequests/accept/{itemid:int}/{reqid:int}/{itemid2:int}/{listid:int}"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3>Accept Request</h3>

<EditForm Model="@item" OnValidSubmit="EditItem">
    <fieldset disabled>
        <div class="form-group">
            <label>Requested By:</label>
            <div>
                <InputText @bind-Value="@item.CreatedBy" class="form-control" />
            </div>
        </div>
        <div class="form-group">
            <label>Item to send:</label>
            <div>
                <InputSelect @bind-Value="@listitem.ItemID" class="form-control">
                    <option value="">--Select Item--</option>
                    @if (i != null)
                    {
                        foreach (var item in i)
                        {
                            if (@item.Id == listitem.ItemID)
                            {
                                <option value="@item.Id">Name: @item.Name   Condition: @item.Condition.Name   Brand: @item.Brand.Name   Category: @item.Category.Name</option>
                            }
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => listitem.ItemID)" />
            </div>
        </div>
    </fieldset>

</EditForm>
<EditForm Model="@item2" OnValidSubmit="Clean">
    <fieldset disabled>
        <div class="form-group">
            <div hidden>
                <InputText @bind-Value="@item2.CreatedBy" class="form-control" />
            </div>
        </div>
        <div class="form-group">
            <label>Item to be recieved:</label>
            <div>
                <InputSelect @bind-Value="@traderequest.ItemID" class="form-control">
                    <option value="">--Select Item--</option>
                    @if (i != null)
                    {
                        foreach (var item in i)
                        {
                            if (@item.Id == traderequest.ItemID)
                            {
                                <option value="@item.Id">Name: @item.Name   Condition: @item.Condition.Name   Brand: @item.Brand.Name   Category: @item.Category.Name</option>
                            }
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => listitem.ItemID)" />
            </div>
        </div>
    </fieldset> 
        

</EditForm>

<br />
<button type="submit" class="btn btn-success btn-block" @onclick="ALL">
    Confirm Trade
</button>
<button class="btn btn-outline-dark btn-block" @onclick="NavigateToList">
    <span class="oi oi-arrow-left"></span>
    Back to list
</button>


@code {
    [Parameter] public int itemid { get; set; }
    [Parameter] public int reqid { get; set; }
    [Parameter] public int itemid2 { get; set; }
    [Parameter] public int listid { get; set; }

    public bool Lock { get; set; } = false;

    public bool enable { get; set; } = true;

    public string save { get; set; }

    Item item = new Item();
    Item item2 = new Item();
    ListItem listitem = new ListItem();
    TradeRequest traderequest = new TradeRequest();

    private IList<TradeRequest> tr;
    private IList<PurchaseRequest> pr;
    private IList<ListItem> li;
    private IList<Item> i;

    protected async override Task OnParametersSetAsync()
    {
        item = await _client.GetFromJsonAsync<Item>($"{Endpoints.ItemsEndpoint}/{itemid}");
        item2 = await _client.GetFromJsonAsync<Item>($"{Endpoints.ItemsEndpoint}/{itemid2}");
        listitem = await _client.GetFromJsonAsync<ListItem>($"{Endpoints.ListItemsEndpoint}/{listid}");
        traderequest = await _client.GetFromJsonAsync<TradeRequest>($"{Endpoints.TradeRequestsEndpoint}/{reqid}");

        save = item.CreatedBy;

        item.CreatedBy = traderequest.CreatedBy;

        item2.CreatedBy = save;

    }

    protected async override Task OnInitializedAsync()
    {
        tr = await _client.GetFromJsonAsync<List<TradeRequest>>($"{Endpoints.TradeRequestsEndpoint}");
        pr = await _client.GetFromJsonAsync<List<PurchaseRequest>>($"{Endpoints.PurchaseRequestsEndpoint}");
        li = await _client.GetFromJsonAsync<List<ListItem>>($"{Endpoints.ListItemsEndpoint}");
        i = await _client.GetFromJsonAsync<List<Item>>($"{Endpoints.ItemsEndpoint}");
    }

    async Task Clean()
    {
        foreach (var tr in tr)
        {
            if (tr.ListItemID == traderequest.ListItemID)
            {
                await _client.DeleteAsync($"{Endpoints.TradeRequestsEndpoint}/{tr.Id}");
            }
        }
        foreach (var pr in pr)
        {
            if (pr.ListItemID == traderequest.ListItemID)
            {
                await _client.DeleteAsync($"{Endpoints.PurchaseRequestsEndpoint}/{pr.Id}");
            }
        }
        foreach (var li in li)
        {
            if (li.Id == traderequest.ListItemID)
            {
                await _client.DeleteAsync($"{Endpoints.ListItemsEndpoint}/{li.Id}");
            }
        }

        EditItem2();
    }

    async Task EditItem()
    {
        await _client.PutAsJsonAsync($"{Endpoints.ItemsEndpoint}/{itemid}", item);
        //Lock = true;
        //enable = false;
    }

    async Task EditItem2()
    {
        await _client.PutAsJsonAsync($"{Endpoints.ItemsEndpoint}/{itemid2}", item2);
        _navManager.NavigateTo("/adminintraderequests/");
    }

    void NavigateToList()
    {
        _navManager.NavigateTo("/adminintraderequests/");
    }

    public void ALL()
    {
        EditItem();

        Clean();
    }


}