@page "/items/create/"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3>Create Item</h3>
<hr />
<br />

<EditForm Model="@item" OnValidSubmit="CreateItem">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>Name:</label>
        <div>
            <InputText @bind-Value="@item.Name" class="form-control" />
            <ValidationMessage For="@(() => item.Name)" />
        </div>
    </div>
    <div class="form-group">
        <label>Price($):</label>
        <div>
            <InputNumber @bind-Value="@item.Price" class="form-control" />
            <ValidationMessage For="@(() => item.Price)" />
        </div>
    </div>
    <div class="form-group">
        <label>Description:</label>
        <div>
            <InputText @bind-Value="@item.Description" class="form-control" />
            <ValidationMessage For="@(() => item.Description)" />
        </div>
    </div>
    <div class="form-group">
        <label>Brand:</label>
        <div>
            <InputSelect @bind-Value="item.BrandID" class="form-control">
                <option value="">--Select Brand--</option>
                @if (Brands != null)
                {
                    foreach (var brand in Brands)
                    {
                        <option value="@brand.Id">@brand.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => item.BrandID)" />
        </div>
    </div>
    <div class="form-group">
        <label>Category:</label>
        <div>
            <InputSelect @bind-Value="item.CategoryID" class="form-control">
                <option value="">--Select Category--</option>
                @if (Categories != null)
                {
                    foreach (var category in Categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => item.CategoryID)" />
        </div>
    </div>
    <button type="submit" class="btn btn-success btn-block">
        Create Item
    </button>
</EditForm>

@code {
    Item item = new Item();

    private IList<Category> Categories;
    private IList<Brand> Brands;

    protected async override Task OnInitializedAsync()
    {
        Categories = await _client.GetFromJsonAsync<List<Category>>($"{Endpoints.CategoriesEndpoint}");
        Brands = await _client.GetFromJsonAsync<List<Brand>>($"{Endpoints.BrandsEndpoint}");
    }

    private async Task CreateItem()
    {
        await _client.PostAsJsonAsync(Endpoints.ItemsEndpoint, item);
        _navManager.NavigateTo("/items/");
    }
}
